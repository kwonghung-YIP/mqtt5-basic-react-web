{"version":3,"sources":["SimpleMqttClient.js","reportWebVitals.js","index.js"],"names":["mqtt","require","reducer","state","action","newState","type","brokerUrl","payload","target","value","username","password","publishTopic","responseTopic","message","mqttClient","connected","topic","console","log","packet","messageId","TextInput","props","className","htmlFor","id","label","readOnly","onChange","SimpleMqttClient","clientId","Math","random","toString","substr","initState","url","useReducer","dispatch","useState","logs","setLogs","logmsg","push","ts","Date","msg","e","disabled","onClick","client","connect","reconnectPeriod","protocolVersion","on","error","connAck","JSON","stringify","subscribe","err","granted","end","options","retain","properties","correlationData","payloadFormatIndicator","contentType","publish","rows","reduce","output","toTimeString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90cc7877.chunk.js","sourcesContent":["import { useReducer, useState } from 'react';\r\n\r\nconst mqtt = require('mqtt');\r\n\r\nconst reducer = (state, action) => {\r\n    let newState = {...state};\r\n    if (action.type === \"change/brokerUrl\") {\r\n        newState = { ...state, brokerUrl: action.payload.target.value };  \r\n    } else if (action.type === \"change/username\") {\r\n        newState = { ...state, username: action.payload.target.value };    \r\n    } else if (action.type === \"change/password\") {\r\n        newState = { ...state, password: action.payload.target.value };    \r\n    } else if (action.type === \"change/publishTopic\") {\r\n        newState = { ...state, publishTopic: action.payload.target.value };\r\n    } else if (action.type === \"change/responseTopic\") {\r\n        newState = { ...state, responseTopic: action.payload.target.value };              \r\n    } else if (action.type === \"change/message\") {\r\n        newState = { ...state, message: action.payload.target.value };                \r\n    } else if (action.type === \"client/init\") {\r\n        newState = { ...state, mqttClient: action.payload };\r\n    } else if (action.type === \"client/connect\") {\r\n        newState = { ...state, connected: true };\r\n    } else if (action.type === \"client/end\") {\r\n        newState = { ...state, mqttClient: null, connected: false };         \r\n    } else if (action.type === \"message/received\") {\r\n        const { message, topic } = action.payload;\r\n        console.log(`message received from topic [${topic}] : [${message}]`);\r\n    } else if (action.type === \"packet/sent\") {\r\n        const { payload: packet } = action;\r\n        console.log(`package sent to topic [${packet.topic}] : messageId [${packet.messageId}]`);\r\n    } else if (action.type === \"packet/received\") {\r\n        const { payload: packet } = action;\r\n        console.log(`package received from topic [${packet.topic}] : messageId [${packet.messageId}]`);\r\n    }\r\n    return newState;\r\n};\r\n\r\nconst SimpleMqttClient = (props) => {\r\n\r\n    const clientId = `webclient_${Math.random().toString(16).substr(2, 8)}`;\r\n\r\n    const initState = {\r\n        clientId: clientId,\r\n        brokerUrl: props.url,\r\n        username: props.username,\r\n        password: props.password,\r\n        publishTopic: \"request/echo\",\r\n        responseTopic: `response/${clientId}/echo`,\r\n        message: \"GoGoGo!\",\r\n        mqttClient: null,\r\n        connected: false,\r\n    };\r\n\r\n    const [ state, dispatch ] = useReducer(reducer,initState);\r\n    const [ logs, setLogs ] = useState([]);\r\n\r\n    //const logs = [];\r\n\r\n    const logmsg = (message) => {\r\n        //const logs2 = logs.slice()\r\n        logs.push({\r\n            ts: new Date(),\r\n            msg: message,\r\n        });\r\n        setLogs(logs);\r\n    }\r\n\r\n    const connect = () => {\r\n        const { clientId, username, password, mqttClient: client } = state;\r\n        if (client==null) {\r\n            let client = mqtt.connect(state.brokerUrl,{\r\n                clientId: clientId,\r\n                reconnectPeriod: 0,\r\n                protocolVersion: 5,\r\n                username: username,\r\n                password: password,\r\n            });\r\n\r\n            client.on('error',(error) => {\r\n                console.error(error);\r\n            });\r\n\r\n            client.on('connect',(connAck) => {\r\n                dispatch({ type:\"client/connect\", payload: connAck });\r\n                logmsg(`client connected: ${JSON.stringify(connAck)}`);\r\n        \r\n                const { responseTopic } = state;\r\n                client.subscribe(responseTopic,{},(err,granted) => {\r\n                });                \r\n            });\r\n\r\n            client.on('message',(topic,message,packet) => {\r\n                logmsg(`message received : topic - [${topic}], message - [${message}]`);\r\n                dispatch({ type:\"message/received\", payload:{ topic: topic, message: message, packet: packet }});\r\n            });\r\n\r\n            client.on('packetsend',(packet) => {\r\n                dispatch({ type:\"packet/sent\", payload: packet });\r\n                logmsg(`packet sent: ${JSON.stringify(packet)}`);\r\n            });\r\n\r\n            client.on('packetreceive',(packet) => {\r\n                //console.log(`package received: ${JSON.stringify(packet)}`);\r\n                dispatch({ type:\"packet/received\", payload: packet });\r\n                logmsg(`packet received: ${JSON.stringify(packet)}`);\r\n            });\r\n\r\n            client.on('disconnect',(packet) => {\r\n                console.log(\"client disconnect\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('offline',() => {\r\n                console.log(\"client offline\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('reconnect',() => {\r\n                console.log(\"client reconnect\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('close',() => {\r\n                console.log(\"client close\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('end',() => {\r\n                dispatch({ type:\"client/end\", payload: client});\r\n            });\r\n\r\n            dispatch({ type:\"client/init\", payload: client});\r\n            logmsg(`client connecting to [${state.brokerUrl}]...`)\r\n        }        \r\n    }\r\n\r\n    const send = () => {\r\n        const { mqttClient:client, publishTopic, responseTopic, message } = state;\r\n\r\n        const options = {\r\n            retain: true,\r\n            properties: {\r\n                responseTopic: responseTopic,\r\n                correlationData: `${Math.random().toString(16)}`,\r\n                payloadFormatIndicator: true,\r\n                contentType: 'text/plain',\r\n            },\r\n        };\r\n\r\n        client.publish(publishTopic,message,options,() => {\r\n            console.log(\"message published!\");\r\n        });\r\n    }\r\n\r\n    const end = () => {\r\n        const { mqttClient: client } = state;\r\n        if (client != null) {\r\n            client.end();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container my-3\">\r\n            <h2>MQTT.js Test Client</h2>\r\n            <TextInput id=\"clientId\" label=\"Client ID\" readOnly={true}\r\n                value={state.clientId} onChange={(e) => dispatch({type:\"change/clientId\",payload:e})}/>\r\n            <TextInput id=\"brokerUrl\" label=\"Broker URL\" readOnly={state.connected}\r\n                value={state.brokerUrl} onChange={(e) => dispatch({type:\"change/brokerUrl\",payload:e})}/>\r\n            <TextInput id=\"usename\" label=\"Username\" readOnly={state.connected}\r\n                value={state.username} onChange={(e) => dispatch({type:\"change/username\",payload:e})}/>\r\n            <TextInput id=\"password\" label=\"Password\" readOnly={state.connected}\r\n                value={state.password} onChange={(e) => dispatch({type:\"change/password\",payload:e})}/>\r\n            <TextInput id=\"publishTopic\" label=\"Publish Topic\" \r\n                value={state.publishTopic} onChange={(e) => dispatch({type:\"change/publishTopic\",payload:e})}/>\r\n            <TextInput id=\"responseTopic\" label=\"Response Topic\" \r\n                value={state.responseTopic} onChange={(e) => dispatch({type:\"change/responseTopic\",payload:e})}/>\r\n            <TextInput id=\"message\" label=\"Message\" \r\n                value={state.message} onChange={(e) => dispatch({type:\"change/message\",payload:e})}/>                        \r\n            <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary ms-2\"\r\n                    disabled={state.connected}\r\n                    onClick={connect}>\r\n                    Connect\r\n                </button>\r\n                \r\n                <button className=\"btn btn-primary mx-2\" \r\n                    disabled={!state.connected}\r\n                    onClick={end}>\r\n                    Disconnect\r\n                </button>\r\n                \r\n                <button className=\"btn btn-secondary me-2\"\r\n                    disabled={!state.connected}\r\n                    onClick={send}>\r\n                    Send message\r\n                </button>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n                <label htmlFor=\"logs\" className=\"form-label\">Logs</label>\r\n                <textarea id=\"logs\" className=\"form-control\" rows=\"10\" readOnly\r\n                    value={logs.reduce((output,log) => {\r\n                        output += `- [${log.ts.toTimeString()}]\\n${log.msg}\\n`;\r\n                        return output;\r\n                    },\"\")}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst TextInput = (props) => {\r\n    return (\r\n        <div className=\"mt-2 row\">\r\n            <label htmlFor={props.id}\r\n                className=\"col-sm-2 col-form-label\">{props.label}\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n                <input id={props.id}\r\n                    className=\"form-control\"\r\n                    readOnly={props.readOnly}\r\n                    value={props.value}\r\n                    onChange={props.onChange}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleMqttClient;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SimpleMqttClient from './SimpleMqttClient';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <SimpleMqttClient\n      url=\"wss://localhost:8001/mqtt\"\n      username=\"user1\"\n      password=\"hm93bqCj6xR562U\"\n    />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}