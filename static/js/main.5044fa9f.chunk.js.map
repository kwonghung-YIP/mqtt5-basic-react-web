{"version":3,"sources":["SimpleMqttClient.js","reportWebVitals.js","index.js"],"names":["mqtt","require","logmsg","logsArray","message","push","length","reducer","state","action","newState","type","brokerUrl","payload","target","value","username","password","publishTopic","responseTopic","console","log","mqttClient","client","connAck","logs","JSON","stringify","subscribe","err","granted","connected","topic","packet","messageId","TextInput","props","className","htmlFor","id","label","readOnly","onChange","SimpleMqttClient","clientId","Math","random","toString","substr","initState","url","useReducer","dispatch","e","disabled","onClick","connect","reconnectPeriod","protocolVersion","on","error","end","options","retain","properties","correlationData","payloadFormatIndicator","contentType","publish","rows","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wSAKMA,EAAOC,EAAQ,IAEfC,EAAS,SAACC,EAAWC,GAKvB,OAJAD,EAAUE,KAAV,UAAkBF,EAAUG,OAA5B,aAAuCF,IAIhCD,GAGLI,EAAU,SAACC,EAAOC,GACpB,IAAIC,EAAQ,eAAOF,GACnB,GAAoB,qBAAhBC,EAAOE,KACPD,EAAQ,2BAAQF,GAAR,IAAeI,UAAWH,EAAOI,QAAQC,OAAOC,aACrD,GAAoB,oBAAhBN,EAAOE,KACdD,EAAQ,2BAAQF,GAAR,IAAeQ,SAAUP,EAAOI,QAAQC,OAAOC,aACpD,GAAoB,oBAAhBN,EAAOE,KACdD,EAAQ,2BAAQF,GAAR,IAAeS,SAAUR,EAAOI,QAAQC,OAAOC,aACpD,GAAoB,wBAAhBN,EAAOE,KACdD,EAAQ,2BAAQF,GAAR,IAAeU,aAAcT,EAAOI,QAAQC,OAAOC,aACxD,GAAoB,yBAAhBN,EAAOE,KACdD,EAAQ,2BAAQF,GAAR,IAAeW,cAAeV,EAAOI,QAAQC,OAAOC,aACzD,GAAoB,mBAAhBN,EAAOE,KACdD,EAAQ,2BAAQF,GAAR,IAAeJ,QAASK,EAAOI,QAAQC,OAAOC,aACnD,GAAoB,gBAAhBN,EAAOE,KACdS,QAAQC,IAAI,eACZX,EAAQ,2BAAQF,GAAR,IAAec,WAAYb,EAAOI,eACvC,GAAoB,mBAAhBJ,EAAOE,KAA2B,CACzC,IAAmBY,EAA0Bf,EAArCc,WAAmBH,EAAkBX,EAAlBW,cACrBK,EAAUf,EAAOI,QACjBY,EAAOvB,EAAOM,EAAMiB,KAAP,oCAAyCC,KAAKC,UAAUH,KAE3ED,EAAOK,UAAUT,EAAc,IAAG,SAACU,EAAIC,OAIvCpB,EAAQ,2BAAQF,GAAR,IAAeuB,WAAW,EAAMN,KAAMA,SAC3C,GAAoB,eAAhBhB,EAAOE,KAAuB,CACrC,IAAMc,EAAOvB,EAAOM,EAAMiB,KAAP,cACnBf,EAAQ,2BAAQF,GAAR,IAAec,WAAY,KAAMS,WAAW,EAAON,KAAMA,SAC9D,GAAoB,qBAAhBhB,EAAOE,KAA6B,CAC3C,MAA2BF,EAAOI,QAA1BT,EAAR,EAAQA,QAAS4B,EAAjB,EAAiBA,MACjBZ,QAAQC,IAAR,WAAgBjB,EAAhB,kCAAiD4B,EAAjD,MAEA,IAAMP,EAAOvB,EAAOM,EAAMiB,KAAP,uCAA4CO,EAA5C,cAAuD5B,IAC1EM,EAAQ,2BAAQF,GAAR,IAAeiB,KAAMA,SAC1B,GAAoB,gBAAhBhB,EAAOE,KAAwB,CACtC,IAAiBsB,EAAWxB,EAApBI,QACRO,QAAQC,IAAR,iCAAsCY,EAAOD,MAA7C,0BAAoEC,EAAOC,UAA3E,MAEA,IAAMT,EAAOvB,EAAOM,EAAMiB,KAAP,uBAA4BC,KAAKC,UAAUM,KAC9DvB,EAAQ,2BAAQF,GAAR,IAAeiB,KAAMA,SAC1B,GAAoB,oBAAhBhB,EAAOE,KAA4B,CAC1C,IAAiBsB,EAAWxB,EAApBI,QACRO,QAAQC,IAAR,qCAA0CY,EAAOD,MAAjD,0BAAwEC,EAAOC,UAA/E,MAEA,IAAMT,EAAOvB,EAAOM,EAAMiB,KAAP,2BAAgCC,KAAKC,UAAUM,KAClEvB,EAAQ,2BAAQF,GAAR,IAAeiB,KAAMA,IAEjC,OAAOf,GAuJLyB,EAAY,SAACC,GACf,OACI,sBAAKC,UAAU,WAAf,UACI,uBAAOC,QAASF,EAAMG,GAClBF,UAAU,0BADd,SACyCD,EAAMI,QAE/C,qBAAKH,UAAU,YAAf,SACI,uBAAOE,GAAIH,EAAMG,GACbF,UAAU,eACVI,SAAUL,EAAMK,SAChB1B,MAAOqB,EAAMrB,MACb2B,SAAUN,EAAMM,iBAMrBC,EArKU,SAACP,GAEtB,IAAMQ,EAAQ,oBAAgBC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,IAE7DC,EAAY,CACdL,SAAUA,EACVhC,UAAWwB,EAAMc,IACjBlC,SAAUoB,EAAMpB,SAChBC,SAAUmB,EAAMnB,SAChBC,aAAc,eACdC,cAAc,YAAD,OAAcyB,EAAd,SACbxC,QAAS,UACTkB,WAAY,KACZS,WAAW,EACXN,KAAM,IAEV,EAA4B0B,qBAAW5C,EAAQ0C,GAA/C,mBAAQzC,EAAR,KAAe4C,EAAf,KAuFA,OACI,sBAAKf,UAAU,iBAAf,UACI,kDACA,cAAC,EAAD,CAAWE,GAAG,WAAWC,MAAM,YAAYC,UAAU,EACjD1B,MAAOP,EAAMoC,SAAUF,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,kBAAkBE,QAAQwC,OACrF,cAAC,EAAD,CAAWd,GAAG,YAAYC,MAAM,aAAaC,SAAUjC,EAAMuB,UACzDhB,MAAOP,EAAMI,UAAW8B,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,mBAAmBE,QAAQwC,OACvF,cAAC,EAAD,CAAWd,GAAG,UAAUC,MAAM,WAAWC,SAAUjC,EAAMuB,UACrDhB,MAAOP,EAAMQ,SAAU0B,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,kBAAkBE,QAAQwC,OACrF,cAAC,EAAD,CAAWd,GAAG,WAAWC,MAAM,WAAWC,SAAUjC,EAAMuB,UACtDhB,MAAOP,EAAMS,SAAUyB,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,kBAAkBE,QAAQwC,OACrF,cAAC,EAAD,CAAWd,GAAG,eAAeC,MAAM,gBAC/BzB,MAAOP,EAAMU,aAAcwB,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,sBAAsBE,QAAQwC,OAC7F,cAAC,EAAD,CAAWd,GAAG,gBAAgBC,MAAM,iBAChCzB,MAAOP,EAAMW,cAAeuB,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,uBAAuBE,QAAQwC,OAC/F,cAAC,EAAD,CAAWd,GAAG,UAAUC,MAAM,UAC1BzB,MAAOP,EAAMJ,QAASsC,SAAU,SAACW,GAAD,OAAOD,EAAS,CAACzC,KAAK,iBAAiBE,QAAQwC,OACnF,sBAAKhB,UAAU,OAAf,UACI,wBAAQA,UAAU,uBACdiB,SAAU9C,EAAMuB,UAChBwB,QAzGA,WACZ,IAAQX,EAAqDpC,EAArDoC,SAAU5B,EAA2CR,EAA3CQ,SAAUC,EAAiCT,EAAjCS,SAC5B,GAAY,MADiDT,EAAvBc,WACpB,CACd,IAAIC,EAASvB,EAAKwD,QAAQhD,EAAMI,UAAU,CACtCgC,SAAUA,EACVa,gBAAiB,EACjBC,gBAAiB,EACjB1C,SAAUA,EACVC,SAAUA,IAGdM,EAAOoC,GAAG,SAAQ,SAACC,GACfxC,QAAQwC,MAAMA,MAGlBrC,EAAOoC,GAAG,WAAU,SAACnC,GACjB4B,EAAS,CAAEzC,KAAK,iBAAkBE,QAASW,OAG/CD,EAAOoC,GAAG,WAAU,SAAC3B,EAAM5B,EAAQ6B,GAC/BmB,EAAS,CAAEzC,KAAK,mBAAoBE,QAAQ,CAAEmB,MAAOA,EAAO5B,QAASA,EAAS6B,OAAQA,QAG1FV,EAAOoC,GAAG,cAAa,SAAC1B,GACpBmB,EAAS,CAAEzC,KAAK,cAAeE,QAASoB,OAG5CV,EAAOoC,GAAG,iBAAgB,SAAC1B,GACvBb,QAAQC,IAAR,4BAAiCK,KAAKC,UAAUM,KAChDmB,EAAS,CAAEzC,KAAK,kBAAmBE,QAASoB,OAGhDV,EAAOoC,GAAG,cAAa,SAAC1B,GACpBb,QAAQC,IAAI,wBAIhBE,EAAOoC,GAAG,WAAU,WAChBvC,QAAQC,IAAI,qBAIhBE,EAAOoC,GAAG,aAAY,WAClBvC,QAAQC,IAAI,uBAIhBE,EAAOoC,GAAG,SAAQ,WACdvC,QAAQC,IAAI,mBAIhBE,EAAOoC,GAAG,OAAM,WACZP,EAAS,CAAEzC,KAAK,aAAcE,QAASU,OAG3C6B,EAAS,CAAEzC,KAAK,cAAeE,QAASU,MA+CpC,qBAMA,wBAAQc,UAAU,uBACdiB,UAAW9C,EAAMuB,UACjBwB,QAjCJ,WACR,IAAoBhC,EAAWf,EAAvBc,WACM,MAAVC,GACAA,EAAOsC,OA4BH,wBAMA,wBAAQxB,UAAU,yBACdiB,UAAW9C,EAAMuB,UACjBwB,QAzDH,WACT,IAAmBhC,EAAiDf,EAA5Dc,WAAmBJ,EAAyCV,EAAzCU,aAAcC,EAA2BX,EAA3BW,cAAef,EAAYI,EAAZJ,QAElD0D,EAAU,CACZC,QAAQ,EACRC,WAAY,CACR7C,cAAeA,EACf8C,gBAAgB,GAAD,OAAKpB,KAAKC,SAASC,SAAS,KAC3CmB,wBAAwB,EACxBC,YAAa,eAIrB5C,EAAO6C,QAAQlD,EAAad,EAAQ0D,GAAQ,WACxC1C,QAAQC,IAAI,0BAyCR,6BAMJ,sBAAKgB,UAAU,OAAf,UACI,uBAAOC,QAAQ,OAAOD,UAAU,aAAhC,kBACA,0BAAUE,GAAG,OAAOF,UAAU,eAAegC,KAAK,KAAK5B,UAAQ,EAC3D1B,MAAOP,EAAMiB,KAAK6C,KAAK,eCrM5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,CACE/B,IAAI,4BACJlC,SAAS,QACTC,SAAS,oBAGbiE,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5044fa9f.chunk.js","sourcesContent":["import { useReducer } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n//const ClientContext = React.createContext(null);\r\n\r\nconst mqtt = require('mqtt');\r\n\r\nconst logmsg = (logsArray, message) => {\r\n    logsArray.push(`${logsArray.length}. ${message}`);\r\n    /*while (logsArray.length > 10) {\r\n        logsArray.shift();\r\n    }*/\r\n    return logsArray;\r\n}\r\n\r\nconst reducer = (state, action) => {\r\n    let newState = {...state};\r\n    if (action.type === \"change/brokerUrl\") {\r\n        newState = { ...state, brokerUrl: action.payload.target.value };  \r\n    } else if (action.type === \"change/username\") {\r\n        newState = { ...state, username: action.payload.target.value };    \r\n    } else if (action.type === \"change/password\") {\r\n        newState = { ...state, password: action.payload.target.value };    \r\n    } else if (action.type === \"change/publishTopic\") {\r\n        newState = { ...state, publishTopic: action.payload.target.value };\r\n    } else if (action.type === \"change/responseTopic\") {\r\n        newState = { ...state, responseTopic: action.payload.target.value };              \r\n    } else if (action.type === \"change/message\") {\r\n        newState = { ...state, message: action.payload.target.value };                \r\n    } else if (action.type === \"client/init\") {\r\n        console.log(\"client/init\");\r\n        newState = { ...state, mqttClient: action.payload };\r\n    } else if (action.type === \"client/connect\") {\r\n        const { mqttClient:client, responseTopic } = state;\r\n        const connAck = action.payload;\r\n        const logs = logmsg(state.logs,`client connected: CONNACK ${JSON.stringify(connAck)}`);\r\n\r\n        client.subscribe(responseTopic,{},(err,granted) => {\r\n\r\n        });\r\n\r\n        newState = { ...state, connected: true, logs: logs };\r\n    } else if (action.type === \"client/end\") {\r\n        const logs = logmsg(state.logs,`client end`);\r\n        newState = { ...state, mqttClient: null, connected: false, logs: logs };         \r\n    } else if (action.type === \"message/received\") {\r\n        const { message, topic } = action.payload;\r\n        console.log(`[${message}] received from topic [${topic}]`);\r\n\r\n        const logs = logmsg(state.logs,`message received from topic [${topic}]: ${message}`);\r\n        newState = { ...state, logs: logs };\r\n    } else if (action.type === \"packet/sent\") {\r\n        const { payload: packet } = action;\r\n        console.log(`package sent to topic [${packet.topic}] : messageId [${packet.messageId}]`);\r\n\r\n        const logs = logmsg(state.logs,`packet sent: ${JSON.stringify(packet)}`);\r\n        newState = { ...state, logs: logs };\r\n    } else if (action.type === \"packet/received\") {\r\n        const { payload: packet } = action;\r\n        console.log(`package received to topic [${packet.topic}] : messageId [${packet.messageId}]`);\r\n\r\n        const logs = logmsg(state.logs,`packet received: ${JSON.stringify(packet)}`);\r\n        newState = { ...state, logs: logs };\r\n    }\r\n    return newState;\r\n};\r\n\r\nconst SimpleMqttClient = (props) => {\r\n\r\n    const clientId = `webclient-${Math.random().toString(16).substr(2, 8)}`;\r\n\r\n    const initState = {\r\n        clientId: clientId,\r\n        brokerUrl: props.url,\r\n        username: props.username,\r\n        password: props.password,\r\n        publishTopic: \"request/echo\",\r\n        responseTopic: `response/${clientId}/echo`,\r\n        message: \"GoGoGo!\",\r\n        mqttClient: null,\r\n        connected: false,\r\n        logs: []\r\n    };\r\n    const [ state, dispatch ] = useReducer(reducer,initState);\r\n\r\n    const connect = () => {\r\n        const { clientId, username, password, mqttClient: client } = state;\r\n        if (client==null) {\r\n            let client = mqtt.connect(state.brokerUrl,{\r\n                clientId: clientId,\r\n                reconnectPeriod: 0,\r\n                protocolVersion: 5,\r\n                username: username,\r\n                password: password,\r\n            });\r\n\r\n            client.on('error',(error) => {\r\n                console.error(error);\r\n            });\r\n\r\n            client.on('connect',(connAck) => {\r\n                dispatch({ type:\"client/connect\", payload: connAck });\r\n            });\r\n\r\n            client.on('message',(topic,message,packet) => {\r\n                dispatch({ type:\"message/received\", payload:{ topic: topic, message: message, packet: packet }});\r\n            });\r\n\r\n            client.on('packetsend',(packet) => {\r\n                dispatch({ type:\"packet/sent\", payload: packet });                \r\n            });\r\n\r\n            client.on('packetreceive',(packet) => {\r\n                console.log(`package received: ${JSON.stringify(packet)}`);\r\n                dispatch({ type:\"packet/received\", payload: packet });                \r\n            });\r\n\r\n            client.on('disconnect',(packet) => {\r\n                console.log(\"client disconnect\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('offline',() => {\r\n                console.log(\"client offline\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('reconnect',() => {\r\n                console.log(\"client reconnect\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('close',() => {\r\n                console.log(\"client close\");\r\n                //dispatch({ type:\"client/close\", payload: client});\r\n            });\r\n\r\n            client.on('end',() => {\r\n                dispatch({ type:\"client/end\", payload: client});\r\n            });\r\n\r\n            dispatch({ type:\"client/init\", payload: client});\r\n        }        \r\n    }\r\n\r\n    const send = () => {\r\n        const { mqttClient:client, publishTopic, responseTopic, message } = state;\r\n\r\n        const options = {\r\n            retain: true,\r\n            properties: {\r\n                responseTopic: responseTopic,\r\n                correlationData: `${Math.random().toString(16)}`,\r\n                payloadFormatIndicator: true,\r\n                contentType: 'text/plain',\r\n            },\r\n        };\r\n\r\n        client.publish(publishTopic,message,options,() => {\r\n            console.log(\"message published!\");\r\n        });\r\n    }\r\n\r\n    const end = () => {\r\n        const { mqttClient: client } = state;\r\n        if (client != null) {\r\n            client.end();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container my-3\">\r\n            <h2>Mqtt Test Client</h2>\r\n            <TextInput id=\"clientId\" label=\"Client ID\" readOnly={true}\r\n                value={state.clientId} onChange={(e) => dispatch({type:\"change/clientId\",payload:e})}/>\r\n            <TextInput id=\"brokerUrl\" label=\"Broker URL\" readOnly={state.connected}\r\n                value={state.brokerUrl} onChange={(e) => dispatch({type:\"change/brokerUrl\",payload:e})}/>\r\n            <TextInput id=\"usename\" label=\"Username\" readOnly={state.connected}\r\n                value={state.username} onChange={(e) => dispatch({type:\"change/username\",payload:e})}/>\r\n            <TextInput id=\"password\" label=\"Password\" readOnly={state.connected}\r\n                value={state.password} onChange={(e) => dispatch({type:\"change/password\",payload:e})}/>\r\n            <TextInput id=\"publishTopic\" label=\"Publish Topic\" \r\n                value={state.publishTopic} onChange={(e) => dispatch({type:\"change/publishTopic\",payload:e})}/>\r\n            <TextInput id=\"responseTopic\" label=\"Response Topic\" \r\n                value={state.responseTopic} onChange={(e) => dispatch({type:\"change/responseTopic\",payload:e})}/>\r\n            <TextInput id=\"message\" label=\"Message\" \r\n                value={state.message} onChange={(e) => dispatch({type:\"change/message\",payload:e})}/>                        \r\n            <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary ms-2\"\r\n                    disabled={state.connected}\r\n                    onClick={connect}>\r\n                    Connect\r\n                </button>\r\n                \r\n                <button className=\"btn btn-primary mx-2\" \r\n                    disabled={!state.connected}\r\n                    onClick={end}>\r\n                    Disconnect\r\n                </button>\r\n                \r\n                <button className=\"btn btn-secondary me-2\"\r\n                    disabled={!state.connected}\r\n                    onClick={send}>\r\n                    Send message\r\n                </button>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n                <label htmlFor=\"logs\" className=\"form-label\">Logs</label>\r\n                <textarea id=\"logs\" className=\"form-control\" rows=\"10\" readOnly\r\n                    value={state.logs.join(\"\\n\")}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst TextInput = (props) => {\r\n    return (\r\n        <div className=\"mt-2 row\">\r\n            <label htmlFor={props.id}\r\n                className=\"col-sm-2 col-form-label\">{props.label}\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n                <input id={props.id}\r\n                    className=\"form-control\"\r\n                    readOnly={props.readOnly}\r\n                    value={props.value}\r\n                    onChange={props.onChange}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimpleMqttClient;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SimpleMqttClient from './SimpleMqttClient';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <SimpleMqttClient\n      url=\"wss://localhost:8001/mqtt\"\n      username=\"user1\"\n      password=\"hm93bqCj6xR562U\"\n    />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}