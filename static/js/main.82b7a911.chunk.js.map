{"version":3,"sources":["components/NavBar.js","components/MQTTClientContext.js","components/TextInput.js","components/RequestResponsePattern.js","components/ConnectDialogue.js","components/BroadcastPanel.js","components/MQTTClientApp.js","reportWebVitals.js","index.js"],"names":["NavBar","props","className","to","MQTTClientContext","React","createContext","TextInput","htmlFor","id","label","value","readOnly","onChange","e","target","RequestResponsePattern","useContext","client","connected","useState","requestTopic","setRequestTopic","responseTopic","setResponseTopic","message","setMessage","uuid","correlationData","setCorrelationData","subscribed","setSubScribed","logs","setLogs","logsRef","useRef","logsCnt","useEffect","console","log","options","clientId","logMsg","event","msg","cnt","current","ts","moment","format","slice","messageCallback","topic","packet","String","packetsendCallback","JSON","stringify","packetreceiveCallback","unsubscribe","err","removeAllListeners","when","location","action","disabled","onClick","on","subscribe","granted","retain","properties","payloadFormatIndicator","contentType","publish","length","scope","map","key","ConnectDialogue","profiles","url","desc","username","password","Math","random","toString","substr","brokerUrl","setBrokerUrl","setUsername","setPassword","modal","bootstrap","document","getElementById","backdrop","keyboard","focus","hide","show","tabIndex","data","selected","type","connect","SelectInput","option","setOption","BroadcastPanel","broadcastTopic","setBroadcastTopic","parse","sentTime","recvTime","delay","valueOf","count","sent","recv","mqtt","require","reducer","state","payload","MQTTClientApp","useReducer","dispatch","Provider","path","exact","Error","reconnectPeriod","protocolVersion","rejectUnauthorized","error","connAck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.82b7a911.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"navbar-header\">\r\n                    <span className=\"navbar-brand\">MQTT.js Client for React Web</span>\r\n                </div>\r\n                <div className=\"collapse navbar-collapse\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/request_response_pattern\" className=\"nav-link\">Request/Response Pattern</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/broadcast\" className=\"nav-link\">Boardcast</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nconst MQTTClientContext = React.createContext();\r\n\r\nexport default MQTTClientContext;","const TextInput = (props) => {\r\n    return (\r\n        <div className=\"mt-2 row\">\r\n            <label htmlFor={props.id}\r\n                className=\"col-sm-2 col-form-label\">{props.label}\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n                <input id={props.id}\r\n                    className=\"form-control\"\r\n                    value={props.value}\r\n                    readOnly={props.readOnly}\r\n                    onChange={(e) => { props.onChange(e.target.value);}} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TextInput;","import React from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\nimport moment from 'moment';\r\nimport { Prompt } from 'react-router';\r\nimport MQTTClientContext from './MQTTClientContext';\r\nimport TextInput from './TextInput';\r\n\r\n\r\nconst RequestResponsePattern = (props) => {\r\n\r\n    const { client, connected } = React.useContext(MQTTClientContext);\r\n\r\n    const [requestTopic, setRequestTopic] = React.useState(\"request/echo\");\r\n    const [responseTopic, setResponseTopic] = React.useState();\r\n    const [message, setMessage] = React.useState(\"GoGoGo!\");\r\n    const [correlationData, setCorrelationData] = React.useState(`${uuid()}`);\r\n\r\n    const [subscribed, setSubScribed] = React.useState(false);\r\n\r\n    const [logs, setLogs] = React.useState([]);\r\n    const logsRef = React.useRef(logs);\r\n    const logsCnt = React.useRef(1);\r\n\r\n    React.useEffect(() => {\r\n        console.log(`reset response topic with new clientId`)\r\n        if (client!==null && client.connected) {\r\n            setResponseTopic(`response/${client.options.clientId}/echo`);\r\n        }\r\n    },[ client, connected ]);\r\n\r\n    /*React.useEffect(() => {\r\n        console.log(`logs.current changed, size:${logs.length}`);\r\n        return () => {\r\n            console.log(`logs.current changed chenaup, size:${logs.current.length}`);\r\n        }\r\n    },[logs]);*/\r\n\r\n    const logMsg = (event, log) => {\r\n        //const msg = `[${new Date().toTimeString()}] - event:[${type}]\\n${text}\\n`;\r\n        const msg = {\r\n            cnt: logsCnt.current++,\r\n            ts: moment().format('HH:mm:ss.SSSSS'),\r\n            event: event,\r\n            log: log,\r\n        };\r\n        //console.log(`before:${logsRef.current.length}`);\r\n        logsRef.current = [msg, ...logsRef.current].slice(0,19);\r\n        setLogs(logsRef.current);\r\n        //console.log(`after: ${logsRef.current.length}`);\r\n    }\r\n\r\n    const messageCallback = (topic, message, packet) => {\r\n        //console.log(`message received: ${JSON.stringify(packet)}`);\r\n        logMsg('message',new String(message));\r\n    }\r\n\r\n    const packetsendCallback = (packet) => {\r\n        //console.log(`package sent2: ${JSON.stringify(packet)}`);\r\n        logMsg('packetsend',JSON.stringify(packet));\r\n    }\r\n\r\n    const packetreceiveCallback = (packet) => {\r\n        //console.log(`package received: ${JSON.stringify(packet)}`);\r\n        logMsg('packetreceive',JSON.stringify(packet));\r\n    };\r\n\r\n    const subscribe = () => {\r\n        if (!subscribed) {\r\n            logsCnt.current =1;\r\n            logsRef.current =[];\r\n            setLogs(logsRef.current);\r\n\r\n            client.on('message', messageCallback);\r\n            client.on('packetsend', packetsendCallback);\r\n            client.on('packetreceive', packetreceiveCallback);\r\n\r\n            const options = {};\r\n            client.subscribe(responseTopic,options,(err,granted) => {\r\n                setSubScribed(true);\r\n            });\r\n        }\r\n    }\r\n\r\n    const unsubscribe = () => {\r\n        if (subscribed) {\r\n            //client.off to remove an eventlistener does not work\r\n            //client.off('message', messageCallback);\r\n            //client.off('packetsend', packetsendCallback);\r\n            //client.off('packetreceive', packetreceiveCallback);  \r\n\r\n            const options = {};\r\n            client.unsubscribe(responseTopic,options,(err) => {              \r\n                client.removeAllListeners('message');\r\n                client.removeAllListeners('packetsend');\r\n                client.removeAllListeners('packetreceive');\r\n                setSubScribed(false);\r\n            });\r\n        }\r\n    }\r\n    \r\n    const send = () => {\r\n        if (subscribed) {\r\n            const options = {\r\n                retain: true,\r\n                properties: {\r\n                    responseTopic: responseTopic,\r\n                    correlationData: correlationData,\r\n                    payloadFormatIndicator: true,\r\n                    contentType: 'text/plain',\r\n                },\r\n            };\r\n    \r\n            client.publish(requestTopic,message,options,() => {\r\n                //console.log(\"message published!\");\r\n                setCorrelationData(`${uuid()}`);\r\n            });  \r\n        }\r\n    }    \r\n    return (\r\n        <div>\r\n            <Prompt \r\n                when={subscribed} \r\n                message={(location,action) => {\r\n                    unsubscribe();\r\n                    return true;\r\n                }}/>\r\n            <p>This page demonstrates how to use request response pattern</p>\r\n\r\n            <TextInput id=\"requestTopic\" label=\"Request Topic\" \r\n                value={requestTopic} \r\n                readOnly={subscribed} \r\n                onChange={setRequestTopic} />\r\n            <TextInput id=\"responseTopic\" label=\"Response Topic\" \r\n                value={responseTopic} \r\n                readOnly={subscribed} \r\n                onChange={setResponseTopic} />\r\n            <TextInput id=\"message\" label=\"Message\" \r\n                value={message} \r\n                onChange={setMessage} />\r\n            <TextInput id=\"correlationData\" label=\"Correlation Data\" \r\n                value={correlationData}\r\n                readOnly={true}\r\n                onChange={setCorrelationData} />\r\n\r\n            <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary me-2\"\r\n                    disabled={!(client !== null && client.connected && !subscribed)}\r\n                    onClick={subscribe}>\r\n                    Subscribe\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary me-2\" \r\n                    disabled={!subscribed}\r\n                    onClick={unsubscribe}>\r\n                    Unsubscribe\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary me-2\"\r\n                    disabled={!subscribed}\r\n                    onClick={send}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n\r\n            {logs.length===0?(<></>):(\r\n            <div className=\"mt-2\">\r\n                <h5>Sent/Received package/message</h5>\r\n            \r\n                <table className=\"table table-striped table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">time</th>\r\n                            <th scope=\"col\">event</th>\r\n                            <th scope=\"col\">log</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {logs.map((msg, key) => (\r\n                        <tr key={key}>\r\n                            <th scope=\"row\">{msg.cnt}</th>\r\n                            <td>{msg.ts}</td>\r\n                            <td>{msg.event}</td>\r\n                            <td>{msg.log}</td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>              \r\n            </div>\r\n            )}  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RequestResponsePattern;\r\n\r\n","import React from 'react';\r\nimport * as bootstrap from 'bootstrap';\r\nimport TextInput from './TextInput';\r\nimport MQTTClientContext from './MQTTClientContext';\r\n\r\nconst ConnectDialogue = (props) => {\r\n\r\n    const profiles = [{\r\n        url: \"ws://test.mosquitto.org:8080/mqtt\",  desc: \"test.mosquitto.org - MQTT over WebSockets, unencrypted, unauthenticated\", username: \"\", password: \"\"\r\n    },{\r\n        url: \"wss://test.mosquitto.org:8081/mqtt\", desc: \"test.mosquitto.org - MQTT over WebSockets, encrypted, unauthenticated\", username: \"\", password: \"\"\r\n    },{\r\n        url: \"ws://test.mosquitto.org:8090/mqtt\",  desc: \"test.mosquitto.org - MQTT over WebSockets, unencrypted, authenticated (rw)\", username: \"rw\", password: \"readwrite\"\r\n    },{\r\n        url: \"ws://test.mosquitto.org:8090/mqtt\",  desc: \"test.mosquitto.org - MQTT over WebSockets, unencrypted, authenticated (ro)\", username: \"ro\", password: \"readonly\"\r\n    },{\r\n        url: \"ws://test.mosquitto.org:8090/mqtt\",  desc: \"test.mosquitto.org - MQTT over WebSockets, unencrypted, authenticated (wo)\", username: \"wo\", password: \"writeonly\"\r\n    },{\r\n        url: \"wss://test.mosquitto.org:8091/mqtt\", desc: \"test.mosquitto.org - MQTT over WebSockets, encrypted, authenticated (rw)\"  , username: \"rw\", password: \"readwrite\"\r\n    },{\r\n        url: \"wss://test.mosquitto.org:8091/mqtt\", desc: \"test.mosquitto.org - MQTT over WebSockets, encrypted, authenticated (ro)\"  , username: \"ro\", password: \"readonly\"\r\n    },{\r\n        url: \"wss://test.mosquitto.org:8091/mqtt\", desc: \"test.mosquitto.org - MQTT over WebSockets, encrypted, authenticated (wo)\"  , username: \"wo\", password: \"writeonly\"\r\n    },{\r\n        url: \"ws://localhost:8000/mqtt\",  desc: \"My local HiveMQ - MQTT over WebSockets, unencrypted, authenticated\"  , username: \"user1\", password: \"hm93bqCj6xR562U\"\r\n    },{\r\n        url: \"wss://localhost:8001/mqtt\", desc: \"My local HiveMQ - MQTT over WebSockets, encrypted, authenticated\"  , username: \"user1\", password: \"hm93bqCj6xR562U\"\r\n    },{\r\n        url: \"ws://kwonghung-yip.asuscomm.com:8000/mqtt\", desc: \"My local HiveMQ - MQTT over WebSockets, encrypted, authenticated\"  , username: \"user1\", password: \"hm93bqCj6xR562U\"\r\n    },{\r\n        url: \"wss://kwonghung-yip.asuscomm.com:8001/mqtt\", desc: \"My local HiveMQ - MQTT over WebSockets, encrypted, authenticated\"  , username: \"user1\", password: \"hm93bqCj6xR562U\"\r\n    }];\r\n\r\n    const defaultProfile = 9;\r\n    const [clientId, setClientId] = React.useState(`webclient_${Math.random().toString(16).substr(2, 8)}`);\r\n    const [brokerUrl, setBrokerUrl] = React.useState(profiles[defaultProfile].url);\r\n    const [username, setUsername] = React.useState(profiles[defaultProfile].username);\r\n    const [password, setPassword] = React.useState(profiles[defaultProfile].password);\r\n\r\n    const modal = React.useRef(null);\r\n    const { connected } = React.useContext(MQTTClientContext);\r\n\r\n    React.useEffect(() => {\r\n        //console.log(`useEffect supposed to be called once`);\r\n        if (modal.current===null) {\r\n            //console.log(\"init modal object\");\r\n            modal.current = new bootstrap.Modal(document.getElementById('connectDialogue'),{\r\n                backdrop: 'static',\r\n                keyboard: false,\r\n                focus: true,\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    React.useEffect(() => {\r\n        //console.log(`call useEffect: ${connected} ...`);\r\n        if (connected) {\r\n            modal.current.hide();\r\n        } else {\r\n            modal.current.show();\r\n        }\r\n    },[ connected ]);\r\n\r\n    return (\r\n        <div className=\"modal\" tabIndex=\"-1\" id=\"connectDialogue\">\r\n            <div className=\"modal-dialog modal-lg modal-dialog-centered\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">MQTT.js client properties</h5>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <TextInput id=\"clientId\" label=\"Client ID\" value={clientId} readOnly={true}/>\r\n                        <SelectInput id=\"profile\" label=\"Profile\" \r\n                            data={profiles} selected={defaultProfile} \r\n                            onChange={(data) => {\r\n                                setBrokerUrl(data.url);\r\n                                setUsername(data.username);\r\n                                setPassword(data.password);\r\n                            }\r\n                        }/>\r\n                        <TextInput id=\"brokerUrl\" label=\"BrokerUrl\" value={brokerUrl} onChange={setBrokerUrl}/>\r\n                        <TextInput id=\"username\" label=\"Username\" value={username} onChange={setUsername}/>\r\n                        <TextInput id=\"password\" label=\"Password\" value={password} onChange={setPassword}/>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() => {props.connect(clientId,brokerUrl,username,password);}}>Connect</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectDialogue;\r\n\r\nconst SelectInput = (props) => {\r\n\r\n    const [ option, setOption ] = React.useState(props.selected);\r\n\r\n    return (\r\n        <div className=\"mt-2 row\">\r\n            <label htmlFor={props.id}\r\n                className=\"col-sm-2 col-form-label\">{props.label}\r\n            </label>\r\n            <div className=\"col-sm-10\">\r\n                <select id={props.id} className=\"form-select\"\r\n                    value={option}\r\n                    onChange={(e) => {\r\n                        //console.log(props.data[e.target.value]);\r\n                        setOption(e.target.value);\r\n                        props.onChange(props.data[e.target.value]);\r\n                    }}>\r\n                {props.data.map((option,key) => (\r\n                    <option key={key} value={key}>{option.desc}</option>\r\n                ))}\r\n                </select>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { Prompt } from 'react-router';\r\nimport MQTTClientContext from './MQTTClientContext';\r\nimport TextInput from './TextInput';\r\n\r\nconst BroadcastPanel = (props) => {\r\n\r\n    const { client, connected } = React.useContext(MQTTClientContext);\r\n\r\n    const [broadcastTopic, setBroadcastTopic] = useState('measure/latency');\r\n    const [subscribed, setSubScribed] = React.useState(false);\r\n\r\n    const [logs, setLogs] = React.useState([]);\r\n    const logsRef = React.useRef(logs);\r\n    const logsCnt = React.useRef(1);\r\n\r\n    const logMsg = (msg) => {\r\n        //console.log(`before:${logsRef.current.length}`);\r\n        logsRef.current = [msg, ...logsRef.current].slice(0,19);\r\n        setLogs(logsRef.current);\r\n        //console.log(`after: ${logsRef.current.length}`);\r\n    }\r\n\r\n    const messageCallback = (topic, message, packet) => {\r\n        //console.log(`message received: ${new String(message)}`);\r\n        const msg = JSON.parse(message);\r\n        const sentTime = moment(msg.sentTime);\r\n        const recvTime = moment();\r\n        const delay = recvTime.valueOf() - sentTime.valueOf();\r\n\r\n        logMsg({\r\n            cnt: msg.count,\r\n            sent: sentTime.format('D/M/YYYY[T]HH:mm:ss.SSSSS'),\r\n            recv: recvTime.format('D/M/YYYY[T]HH:mm:ss.SSSSS'),\r\n            delay: delay,\r\n        });\r\n    }\r\n\r\n    const subscribe = () => {\r\n        if (!subscribed) {\r\n            logsCnt.current =1;\r\n            logsRef.current =[];\r\n            setLogs(logsRef.current);\r\n\r\n            client.on('message', messageCallback);\r\n\r\n            const options = {};\r\n            client.subscribe(broadcastTopic,options,(err,granted) => {\r\n                setSubScribed(true);\r\n            });\r\n        }\r\n    }\r\n\r\n    const unsubscribe = () => {\r\n        if (subscribed) {\r\n            const options = {};\r\n            client.unsubscribe(broadcastTopic,options,(err) => {              \r\n                client.removeAllListeners('message');\r\n                setSubScribed(false);\r\n            });\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Prompt when={subscribed} \r\n                message={(location,action) => {\r\n                    unsubscribe();\r\n                    return true;\r\n                }}/>\r\n            <TextInput id=\"broadcastTopic\" label=\"Boardcast Topic\" \r\n                value={broadcastTopic} \r\n                readOnly={subscribed} \r\n                onChange={setBroadcastTopic} />\r\n\r\n            <div className=\"mt-2\">\r\n                <button className=\"btn btn-primary me-2\"\r\n                    disabled={!(client !== null && client.connected && !subscribed)}\r\n                    onClick={subscribe}>\r\n                    Subscribe\r\n                </button>\r\n\r\n                <button className=\"btn btn-primary me-2\" \r\n                    disabled={!subscribed}\r\n                    onClick={unsubscribe}>\r\n                    Unsubscribe\r\n                </button>\r\n            </div>\r\n\r\n            {logs.length==0?(<></>):(\r\n            <div className=\"mt-2\">\r\n                <h5>Received message</h5>\r\n            \r\n                <table className=\"table table-striped table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">sent time</th>\r\n                            <th scope=\"col\">received time</th>\r\n                            <th scope=\"col\">delay</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {logs.map((msg, key) => (\r\n                        <tr key={key}>\r\n                            <td scope=\"row\">{msg.cnt}</td>\r\n                            <td>{msg.sent}</td>\r\n                            <td>{msg.recv}</td>\r\n                            <td>{msg.delay}</td>\r\n                        </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>              \r\n            </div>\r\n            )}              \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BroadcastPanel;","import React from 'react';\r\nimport NavBar from './NavBar';\r\nimport RequestResponsePattern from './RequestResponsePattern';\r\nimport MQTTClientContext from './MQTTClientContext';\r\n\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport ConnectDialogue from './ConnectDialogue';\r\nimport BroadcastPanel from './BroadcastPanel';\r\n\r\nconst mqtt = require('mqtt');\r\n\r\nconst reducer = (state, action) => {\r\n    const { type, payload } = action;\r\n    let newState;\r\n    if (type === 'client/init') {\r\n        newState = { ...state, client: payload };\r\n    } else if (type === 'client/close') {\r\n        newState = { ...state, client: null };\r\n    } else if (type === 'client/end') {\r\n        newState = { ...state, client: null };\r\n    } else {\r\n        newState = { ...state };\r\n    }\r\n    return newState;\r\n}\r\n\r\nconst MQTTClientApp = (props) => {\r\n\r\n    const initState = {\r\n        client: null,\r\n    };\r\n    const [state, dispatch] = React.useReducer(reducer, initState);\r\n\r\n    const connect = (clientId, brokerUrl, username, password) => {\r\n        let { client } = state;\r\n        if (client !== null && client.connected) {\r\n            throw new Error('Client has already been connected');\r\n        }\r\n\r\n        client = mqtt.connect(brokerUrl, {\r\n            clientId: clientId,\r\n            reconnectPeriod: 0,\r\n            protocolVersion: 5,\r\n            username: username,\r\n            password: password,\r\n            rejectUnauthorized: false,\r\n        });\r\n\r\n        client.on('error', (error) => {\r\n            throw error;\r\n        });\r\n\r\n        client.on('connect', (connAck) => {\r\n            dispatch({ type: 'client/connect', payload: connAck });\r\n            //client.subscribe(state.responseTopic, {}, (err, granted) => {});\r\n        });\r\n\r\n        /*client.on('message', (topic, message, packet) => {\r\n            console.log(`message received: ${JSON.stringify(packet)}`);\r\n        });\r\n\r\n        client.on('packetsend', (packet) => {\r\n            console.log(`package sent: ${JSON.stringify(packet)}`);\r\n            //dispatch({ type: 'packet/sent', payload: packet });\r\n        });\r\n\r\n        client.on('packetreceive', (packet) => {\r\n            console.log(`package received: ${JSON.stringify(packet)}`);\r\n            //dispatch({ type: 'packet/received', payload: packet });\r\n        });*/\r\n\r\n        client.on('disconnect', (packet) => {\r\n            console.log('client disconnect');\r\n            //dispatch({ type:\"client/close\", payload: client});\r\n        });\r\n\r\n        client.on('offline', () => {\r\n            console.log('client offline');\r\n            //dispatch({ type:\"client/close\", payload: client});\r\n        });\r\n\r\n        client.on('reconnect', () => {\r\n            console.log('client reconnect');\r\n            //dispatch({ type:\"client/close\", payload: client});\r\n        });\r\n\r\n        client.on('close', () => {\r\n            console.log('client close');\r\n            dispatch({ type:\"client/close\", payload: client});\r\n        });\r\n\r\n        client.on('end', () => {\r\n            console.log('client end');\r\n            dispatch({ type: 'client/end', payload: client });\r\n        });\r\n\r\n        client.on('newListener', () => {\r\n            console.log(\"newListener\");\r\n        });\r\n\r\n        client.on('removeListener', () => {\r\n            console.log(\"removeListener\");\r\n        });\r\n\r\n        dispatch({ type: 'client/init', payload: client });\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <MQTTClientContext.Provider value={{ client: state.client, connected: (state.client!==null && state.client.connected) }}>\r\n                <HashRouter>\r\n                    <NavBar />\r\n                    <Switch>\r\n                        <Route path=\"/\" exact>\r\n                            <Redirect to=\"/request_response_pattern\" />\r\n                        </Route>\r\n                        <Route path=\"/request_response_pattern\">\r\n                            <RequestResponsePattern />\r\n                        </Route>\r\n                        <Route path=\"/broadcast\">\r\n                            <BroadcastPanel />\r\n                        </Route>\r\n                    </Switch>\r\n                    <ConnectDialogue connect={connect}/>\r\n                </HashRouter>\r\n            </MQTTClientContext.Provider>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MQTTClientApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MQTTClientApp from './components/MQTTClientApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\n//localStorage.debug = 'mqttjs*';\n\nReactDOM.render(\n  //<React.StrictMode>\n  <MQTTClientApp/>,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}